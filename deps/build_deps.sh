#!/bin/sh

set -e

mkdir -p "$DEPS_BUILD_DIR"
if [ ! -d "$DEPS_BUILD_DIR" ] ; then
    echo "build directory '$DEPS_BUILD_DIR' doesn't exist"
    exit 1
fi

if [ "$2" = clean ] ; then
    if [ ! -z "$DEPS_BUILD_DIR" ] ; then
        rm -rf "$DEPS_BUILD_DIR"/*
    fi
    exit
fi

# Include Homebrew binaries on PATH if not there yet:
# Also make sure that GNU sed and recent version of GNU make are used, as
# GNU gettext requires that for compilation:

add_homebrew_paths() {
    for root in /opt/homebrew /usr/local; do
        [ -d "$root/bin" ] && PATH="$root/bin:$PATH"
        for pkg in "$@"; do
            prefix="$root/opt/$pkg"
            [ -d "$prefix/libexec/gnubin" ] && PATH="$prefix/libexec/gnubin:$PATH"
            [ -d "$prefix/bin" ] && PATH="$prefix/bin:$PATH"
        done
    done
    return 0
}

add_homebrew_paths gnu-sed make bison curl
export PATH

# Check that the tools have appropriate versions:
if ! make --version 2>/dev/null | grep -q 'GNU Make'; then
    echo "Error: GNU make required (brew install make)." >&2
    exit 1
fi
if make --version | head -n1 | grep -q 'GNU Make 3\.'; then
    echo "Error: GNU make >= 4 required (brew install make)." >&2
    exit 1
fi

if ! sed --version 2>/dev/null | grep -q 'GNU sed'; then
    echo "Error: GNU sed required (brew install gnu-sed)." >&2
    exit 1
fi

if yacc --version | head -n1 | grep -q 'GNU Bison 2\.'; then
    echo "Error: GNU bison >= 3 required (brew install bison)." >&2
    exit 1
fi

# Fake Java binaries so that gettext configure script doesn't invoke the system ones:
mkdir -p "$DEPS_BUILD_DIR/helpers"
touch "$DEPS_BUILD_DIR"/helpers/{java,javac}
chmod +x "$DEPS_BUILD_DIR"/helpers/{java,javac}
PATH="$DEPS_BUILD_DIR/helpers:$PATH"


CCACHE_PREFIX=$(brew --prefix ccache)
if [ -d $CCACHE_PREFIX/libexec ] ; then
    CC=$CCACHE_PREFIX/libexec/clang
    CXX=$CCACHE_PREFIX/libexec/clang++
else
    CC=clang
    CXX=clang++
fi

if [ "$CONFIGURATION" = "Debug" ] ; then
    cflags_config="-O2 -ggdb3"
    ldflags_config="-O2 -ggdb3"
else
    cflags_config="-O2"
    ldflags_config=""
fi

# don't produce error if the build is stopped for other reasons
trap "exit 0" INT

xcode_ninja_file="$DEPS_BUILD_DIR/xcode-$$.ninja"
trap "rm -f $xcode_ninja_file" EXIT

for ARCH in $ARCHS; do
    cat <<EOT >$xcode_ninja_file
# Generated by Xcode on `date`

SDKROOT = $SDKROOT
MACOSX_DEPLOYMENT_TARGET = $MACOSX_DEPLOYMENT_TARGET
CONFIGURATION = $CONFIGURATION

arch = $ARCH
top_srcdir = `pwd`
builddir = $DEPS_BUILD_DIR

cc = $CC
cxx = $CXX

cflags_config = $cflags_config
ldflags_config = $ldflags_config

include build.ninja
EOT
    ninja -f $xcode_ninja_file $1
done

../macos/merge-archs.sh "$DEPS_BUILD_DIR/$1"
