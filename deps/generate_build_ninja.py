#!/usr/bin/env python3

import os, sys, subprocess
from collections import OrderedDict
from glob import glob
from ninja_syntax import Writer

GETTEXT_VERSION = "0.26"  # use of " important for Xcode build!
GETTEXT_TARBALL = 'gettext-%s.tar.xz' % GETTEXT_VERSION
GETTEXT_SHA256 = 'd1fb86e260cfe7da6031f94d2e44c0da55903dbae0a2fa0fae78c91ae1b56f00'

_exclusion_list = [
    '.DS_Store',
    '.git',
    'autom4te.cache', 'build_windows',
    'Debug', 'Debug_static', 'Release', 'Release_static',
    'bin',
    'docs', 'doc', 'examples', 'test', 'tests', 'test-driver',
]
_exclusion_gitignore = subprocess.run(['git', 'ls-files', '--others', '-i', '--exclude-standard'],
                                      stdout=subprocess.PIPE).stdout.decode('utf-8').splitlines()

def _is_excluded(e):
    if e.name in _exclusion_list or e.path in _exclusion_gitignore:
        return True
    if e.name.endswith('-tests'):
        return True
    return False

def collect_files(dirname):
    for e in os.scandir(dirname):
        if _is_excluded(e):
            continue
        if e.is_file():
            yield e.path
        elif e.is_dir():
            yield from collect_files(e.path)

def emit_commands(commands):
    for cmd in commands:
        assert "'" not in cmd
        yield "echo 'note: â‹¯  %s'" % cmd
        yield 'tmp=`mktemp`'
        yield '%s >$$tmp 2>&1 || (cat $$tmp ; exit 1)' % cmd
        yield 'rm -f $$tmp'

def gen_pre_build_commands(tarball, patches, srcdir):
    yield 'rm -rf "$workdir" "$destdir"'
    yield 'mkdir -p "$workdir"'
    if tarball:
        yield f'tar -x -f "$builddir/{tarball}" -C "$workdir" --strip-components 1'
        for p in patches:
            yield f'patch -d "$workdir" -p1 < "$top_srcdir/{p}"'
    else:
        yield 'cp -aR "$srcdir/" "$workdir"'
    yield 'cd "$workdir"'

post_build_commands = [
    'rm -rf "$workdir"',
    'touch $intdir/$name.done',
    ]

default_build_commands = [
    '$configure $configure_flags',
    'make $makeflags',
    'make install -j1 DESTDIR="$destdir"',
    ]


def gen_configure(n, prj, tarball=None, patches=[], srcdir=None, configure='configure', flags=[], build_commands=None):
    target = '$intdir/%s.done' % prj
    if not tarball and not srcdir:
        srcdir = prj
    commands = build_commands if build_commands else default_build_commands
    all_flags = ' '.join(flags)

    configure_commands = list(gen_pre_build_commands(tarball, patches, srcdir)) + commands + post_build_commands
    n.rule('%s_build' % prj,
           description='Building deps/$name...',
           pool='console',
           command=' && '.join(emit_commands(configure_commands)))
    n.build([target],
            '%s_build' % prj,
            inputs=sorted([f'$builddir/{tarball}'] + patches if tarball else collect_files(srcdir)),
            variables=OrderedDict([
                ('name', prj),
                ('configure', configure),
                ('configure_flags', all_flags),
                ('srcdir', '$top_srcdir/%s' % (srcdir if srcdir else prj)),
                ('destdir', '$builddir/%s.$arch' % prj),
                ('workdir', '$intdir/%s.$arch' % prj),
            ]))
    n.build([prj], 'phony', target)
    return target


with open('build.ninja', 'w') as buildfile:
    n = Writer(buildfile, width=20)
    n.comment('generated by %s' % sys.argv[0])
    n.include('build.vars.ninja')

    n.rule('download',
           description='Downloading $url...',
           pool='console',
           command='curl -L -o $out $url && test "$sha256" = `shasum -a256 $out | cut -f1 -d" "`')

    targets = []

    n.build(['$builddir/%s' % GETTEXT_TARBALL],
            'download',
            variables={
                'url': 'https://ftpmirror.gnu.org/gnu/gettext/%s' % GETTEXT_TARBALL,
                'sha256': GETTEXT_SHA256,
            })

    targets.append(gen_configure(n, 'gettext',
                                 tarball=GETTEXT_TARBALL,
                                 patches=glob('gettext/*.patch'),
                                 configure='./configure',
                                 flags=[
                                     '--prefix=/',
                                     'CC=$cc',
                                     'CXX=$cxx',
                                     # GNU gettext checks against and won't use macOS-provided iconv(), see here:
                                     # https://mail.gnu.org/archive/html/bug-gnulib/2024-05/msg00375.html
                                     # They are not wrong about it being POSIX-broken, but it doesn't seem to
                                     # materially affect Poedit's use (conversions of catalogs are avoided and
                                     # other contexts are OK with this particular issue). And as this is a
                                     # runtime difference, we've been using "bad" iconv() implementation
                                     # for over a year, so...
                                     'am_cv_func_iconv_works=yes',
                                     # On macOS 10.15 Vista, mere use of CFLocale or CFPreferences from command line
                                     # executables, as done by gettext tools, triggers UAC prompts if the hosting app
                                     # happens to be in e.g. ~/Desktop or ~/Downloads. As we don't care for these
                                     # capabilities in gettext tools anyway, just disable them as the lesser evil.
                                     'gt_cv_func_CFPreferencesCopyAppValue=no',
                                     'gt_cv_func_CFLocaleCopyPreferredLanguages=no',
                                     'CFLAGS="$cflags"',
                                     'CXXFLAGS="$cxxflags"',
                                     'LDFLAGS="$ldflags"',
                                     '--config-cache',
                                     '--with-libiconv-prefix=$SDKROOT/usr',
                                     '--with-libxml2-prefix=$SDKROOT/usr',
                                     '--disable-static',
                                     '--disable-java',
                                     '--disable-csharp',
                                     '--disable-rpath',
                                     '--disable-dependency-tracking',
                                     '--enable-silent-rules',
                                     '--enable-relocatable',
                                 ],
                                 build_commands=[
                                     # Prevent automake regeneration:
                                     'touch `find . -name aclocal.m4`',
                                     'touch `find . -name configure`',
                                     'touch `find . -name config.h.in`',
                                     'touch `find . -name Makefile.in`',
                                     'touch `find . -name *.1`',
                                     'touch `find . -name *.3`',
                                     'find . -name *.html -exec touch {} \\;',
                                     # Prevent running msgfmt:
                                     'touch `find . -name *.gmo`',
                                 ] + default_build_commands + [
                                     # delete unwanted stuff
                                     'rm -f $destdir/bin/{autopoint,envsubst,gettext*,ngettext,recode-sr-latin}',
                                     # fix dylib references to work
                                     '"$top_srcdir/../macos/fixup-dylib-deps.sh" /lib @rpath $destdir/lib $destdir/bin/*',
                                     # strip executables
                                     'strip -S -u -r $destdir/bin/{msgfmt,msgmerge,msgunfmt,msgcat,xgettext}',
                                     'strip -S -x $destdir/lib/lib*.*.dylib',
                                 ]))

    n.default(targets)
